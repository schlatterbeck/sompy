#!/usr/bin/python3

import pytest
import numpy as np
from sompy import Sommerfeld

class Test_Base:

    def test_saoa_bessel (self):
        vals = \
            [ [ -3.11803722    +1.3262701j
              ,  5.93318653    -3.36045551j
              ,  0.139051959   -0.414679796j
              , -3.11248446    +1.33915186j
              ,  0.00753160566 +0.0176054034j
              ,  2.58885336    -0.97795552j
              ]
            , [ -2.64690518    +0.917380214j
              ,  5.22539663    -2.02546954j
              ,  0.294826061   -0.657950521j
              , -2.63087296    +0.960900962j
              ,  0.0013268512  +0.00372831593j
              ,  2.20666766    -0.518677175j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.zeros (s.rho.shape, dtype = complex)
        s.b = np.ones  (s.rho.shape, dtype = complex) * (53.2088928-53.2088928j)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [7] = 1
        result = []
        t = np.ones (s.rho.shape) * .25
        r = s.saoa (t, cond = cond)
        result.append (r [0])
        r = s.saoa (t * 2, cond = cond)
        result.append (r [0])
        result = np.array (result)
        assert result.shape == vals.shape
        assert result == pytest.approx (vals, rel = 1e-5)
    # end def test_saoa_bessel

    def test_saoa_hankel (self):
        vals = \
            [ [ -2.138304      -1.14035702j
              ,  0.121376038   +0.0647298098j
              , -0.153132051   +0.287140638j
              ,  2.12156224    +1.13142872j
              , -0.00265042298 -0.0014134699j
              ,  0.0364189744  +0.029970834j
              ]
            , [ -2.17637038    -1.22720146j
              ,  0.120408714   +0.0678955019j
              , -0.162322715   +0.2878699j
              ,  2.15976238    +1.2178365j
              , -0.00262929988 -0.0014825972j
              ,  0.0358796231  +0.0309694745j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.ones (s.rho.shape, dtype = complex) * 2.51327419j
        s.b = np.ones (s.rho.shape, dtype = complex) * (3.76991153 -1.2566371j)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        t = np.zeros (s.rho.shape)
        r = s.saoa (t, cond = cond)
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-5)
    # end def test_saoa_hankel

    def test_rom1_bessel (self):
        vals = \
            [ [ 0j, 0j, 0j, 0j, 0j, 0j ] # not computed for bessel
            , [ -2.31588697    +0.480371684j
              ,  4.71199608    -1.50895941j
              ,  0.324989647   -0.507604897j
              , -2.30867672    +0.528231323j
              , -0.00221469323 +0.012674178j
              ,  1.96858811    -0.311186165j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.zeros (s.rho.shape, dtype = complex)
        s.b = np.ones  (s.rho.shape, dtype = complex) * (53.2088928-53.2088928j)
        r = s.rom1 (2, s.is_bessel)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [7] = 1
        r = r [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_rom1_bessel

    def test_rom1_hankel (self):
        vals = \
            [ [ -1.44701922    +1.97692227j
              ,  0.126062781   -0.0513910204j
              ,  0.224961758   +0.193945825j
              ,  1.45205915    -1.99802136j
              , -0.00332087232 +0.00183619559j
              ,  0.044633951   -0.00629247818j
              ]
            , [ 0j, 0j, 0j, 0j, 0j, 0j ] # not computed for hankel
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.ones (s.rho.shape, dtype = complex) * 2.51327419j
        s.b = np.ones (s.rho.shape, dtype = complex) * (3.76991153 -1.2566371j)
        r = s.rom1 (2, s.is_hankel)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [7] = 1
        r = r [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_rom1_hankel

    def test_gshank_bessel (self):
        seed = \
            [ [ -2.31588697    +0.480371684j
              ,  4.71199608    -1.50895941j
              ,  0.324989647   -0.507604897j
              , -2.30867672    +0.528231323j
              , -0.00221469323 +0.012674178j
              ,  1.96858811    -0.311186165j
              ]
            , [ -2.18897271    +0.478487819j
              ,  4.46816778    -1.46256638j
              ,  0.149093568   -0.235078514j
              , -2.18731856    +0.48920086j
              , -0.00232726359 +0.0125354007j
              ,  1.86808836    -0.306106269j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [ -2.80080628  -0.413829148j
              ,  5.88886356  +0.292651534j
              ,  1.12654698  -0.116916478j
              , -2.99543357  -0.385962725j
              , -0.002336937 +0.0128434291j
              ,  2.34222507  +0.4738428j
              ]
            , [ -2.87119198    -0.397920609j
              ,  5.88670492    +0.286414981j
              ,  0.559056878   -0.0576702692j
              , -2.91910267    -0.391062587j
              , -0.00244203862 +0.0127298869j
              ,  2.34124136    +0.470980108j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        b = np.zeros (s.rho.shape, dtype = complex)
        b [7] = 53.2088928 -53.2088928j
        b [8] = 50.7713356 -50.7713356j
        d = np.array ([33.4321327 +0j, 31.9005718 +0j])
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [7] = cond [8] = 1
        r = s.gshank (b, d, seed, cond) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_bessel

    def test_gshank_hankel (self):
        seed = \
            [ [  2.00776601   -8.01187611j
              , -0.272398651  +0.0381847322j
              , -0.706325531  -0.50113225j
              , -2.06688285   +8.25211906j
              ,  0.0083973892 -0.00705266185j
              , -0.0908726901 -0.0253810994j
              ]
            , [  2.19408679    -8.17548943j
              , -0.27332291    +0.0343347378j
              , -0.7048949     -0.517745733j
              , -2.25558758    +8.4144516j
              ,  0.00848118961 -0.00692269811j
              , -0.0907073617  -0.0266431328j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [  13.0748482   -10.4512615j
              , -2.36912513   +0.433109283j
              , -1.41920185   -4.10852337j
              , -11.2865829   +10.357749j
              ,  0.0147127882 -0.00860253721j
              , -0.933717251  +0.0110758897j
              ]
            , [  13.7067928   -9.71621895j
              , -2.41830635   +0.102204993j
              , -0.954755962  -4.22943687j
              , -11.8771076   +9.93634701j
              ,  0.0149100628 -0.00816507265j
              , -0.934709907  -0.12284977j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        st = np.zeros (s.rho.shape, dtype = complex)
        st [0] = 2.51327419j
        st [1] = 2.51327419j
        d = np.array ([-0.0314159133 +31.4159126j, -5.53947687 +31.4159298j])
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        r = s.gshank (st, d, seed, cond) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_hankel

    def test_gshank_hankel_recursive (self):
        seed = \
            [ [ -13.0748482   +10.4512615j
              ,  2.36912513   -0.433109283j
              ,  1.41920185   +4.10852337j
              ,  11.2865829   -10.357749j
              , -0.0147127882 +0.00860253721j
              ,  0.933717251  -0.0110758897j
              ]
            , [ -13.7067928   +9.71621895j
              ,  2.41830635   -0.102204993j
              ,  0.954755962  +4.22943687j
              ,  11.8771076   -9.93634701j
              , -0.0149100628 +0.00816507265j
              ,  0.934709907  +0.12284977j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [ 0.103320166     -0.988833129j
              ,  5.96449757     +0.454928935j
              ,  6.3460722      -0.759163558j
              , -6.10379219     -0.0741284937j
              ,  0.000911501935 +0.0154020973j
              ,  2.37479591     +0.548333287j
              ]
            , [ -0.784671187    -0.825073123j
              ,  5.94271421     +0.419626474j
              ,  5.33457327     -0.620028794j
              , -5.16232586     -0.182956994j
              ,  0.000108209628 +0.0149045251j
              ,  2.36532521     +0.532098413j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        st = np.zeros (s.rho.shape, dtype = complex)
        st [0] = 6.40884924 -1.2566371j
        st [1] = 6.40884924 -1.2566371j
        d  = np.array ([26.8740673   +16.2709866j, 27.2886486  +16.5219936j])
        d2 = np.array ([0.0314159133 +31.4159126j,  5.53947687 +31.4159298j])
        bk = np.zeros (s.rho.shape, dtype = complex)
        bk [0] = 12.9941263 +2.73043895j
        bk [1] = 12.9941263 +2.73043895j
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        r = s.gshank (st, d, seed, cond, bk, d2) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_hankel_recursive

    def test_evlua (self):
        vals = \
            [ [  1056.00671 -330.47583j
              ,  872.122375 -593.691833j
              ,  1150.5542  -498.038666j
              , -905.507202 +534.14978j
              ]
            , [  886.40332  -280.664612j
              ,  867.573914 -581.21875j
              ,  1112.45508 -495.226624j
              , -939.632324 +520.576355j
              ]
            , [  186.194336 -61.4843178j
              ,  858.612061 -537.646362j
              ,  1027.47156 -479.358215j
              , -1019.78796 +480.458313j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        erv, ezv, erh, eph = s.evlua ()
        result = []
        result.append ([erv [0], ezv [0], erh [0], eph [0]])
        result.append ([erv [1], ezv [1], erh [1], eph [1]])
        result.append ([erv [7], ezv [7], erh [7], eph [7]])
        result = np.array (result)
        assert result.shape == vals.shape
        assert result == pytest.approx (vals, rel = 1e-3)
    # end def test_evlua

    def test_intrp_single (self):
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        f = s.intrp (np.array ([0.0941202119, 1.24357438]))
        f_fortran = np.array \
            ([ -3.26258588 -19.2991772j
             , -53.3284111 -52.9422455j
             , -38.2752724 -81.3240128j
             ,  38.6517792 +80.6188354j
            ])
        f_python = np.array \
            ([ -3.26313939  -19.29921898j
             , -53.3261047  -52.93932859j
             , -38.27436478 -81.32161134j
             ,  38.65104022 +80.61625232j
            ])
        assert f == pytest.approx (f_python,  rel = 1e-6)
        assert f == pytest.approx (f_fortran, rel = 5e-4)
    # end def test_intrp_single

    def test_intrp (self):
        xy = np.array \
            ([ [0.100012764,        1.09986722]
             , [0.107722193,       0.974408507]
             , [0.116889544,       0.867139518]
             , [0.127199963,       0.776345909]
             , [0.138398260,       0.699692786]
             , [0.150286064,       0.634832799]
             , [0.162712350,       0.579675555]
             , [0.175562739,       0.532465994]
             , [0.188750699,       0.491772890]
             , [0.202210173,       0.456444800]
             , [0.215890393,       0.425559282]
             , [0.229751900,       0.398377240]
             , [0.243763819,       0.374303937]
             , [0.257901609,       0.352858663]
             , [0.272145629,       0.333650172]
             , [0.286480099,       0.316358089]
             , [0.300891995,       0.300718188]
             , [0.315370798,       0.286511123]
             , [0.329907656,       0.273553669]
             , [0.344495207,       0.261691689]
             , [0.359127313,       0.250794917]
             , [0.373798698,       0.240752384]
             , [0.388504952,       0.231469274]
             , [0.403242260,       0.222863987]
             , [0.418007284,       0.214866102]
             , [0.432797253,       0.207414344]
             , [0.447609603,       0.200455442]
             , [0.462442279,       0.193942636]
             , [0.477293372,       0.187834889]
             , [0.492161155,       0.182095960]
             , [0.507044196,       0.176693752]
             , [0.521941245,       0.171599776]
             , [0.536850989,       0.166788653]
             , [0.551772535,       0.162237629]
             , [0.566704929,       0.157926351]
             , [0.581647336,       0.153836519]
             , [0.596598983,       0.149951607]
             , [0.611559153,       0.146256715]
             , [0.626527309,       0.142738312]
             , [0.641502857,       0.139384165]
             , [8.91261026E-02,    1.57018709]
             , [9.04005021E-02,    1.40268528]
             , [9.41202119E-02,    1.24357438]
             ])
        f_fortran = np.array \
            ([ [ (-4.79375362 -28.2319698j), (-55.1678619 -50.1319427j)
               , (-38.9286118 -79.9155045j), (39.7559090 +78.4115906j)
               ]
             , [ (-6.25288057 -36.4585838j), (-57.5458870 -46.4586906j)
               , (-39.7510986 -78.0537033j), (41.1738052 +75.5557861j)
               ]
             , [ (-7.66597462 -43.9133873j), (-60.3304558 -42.0844879j)
               , (-40.6852646 -75.8069153j), (42.8166313 +72.1955109j)
               ]
             , [ (-9.06394768 -50.6095123j), (-63.3935928 -37.1695824j)
               , (-41.6722603 -73.2549820j), (44.6029091 +68.4626389j)
               ]
             , [ (-10.4782553 -56.5903320j), (-66.6264648 -31.8409290j)
               , (-42.6636620 -70.4638672j), (46.4610786 +64.4605713j)
               ]
             , [ (-11.9334736 -61.9041748j), (-69.9335785 -26.1964188j)
               , (-43.6178932 -67.4879608j), (48.3258438 +60.2693748j)
               ]
             , [ (-13.4467516 -66.5998535j), (-73.2309494 -20.3101215j)
               , (-44.4980011 -64.3721466j), (50.1389503 +55.9495010j)
               ]
             , [ (-15.0224247 -70.7251587j), (-76.4541855 -14.2424669j)
               , (-45.2774963 -61.1556473j), (51.8560829 +51.5491982j)
               ]
             , [ (-16.6488228 -74.3678513j), (-79.5958405 -8.08296776j)
               , (-45.9608727 -57.8930855j), (53.4881020 +47.1210022j)
               ]
             , [ (-18.3548737 -77.4917679j), (-82.5462036 -1.80267370j)
               , (-46.4880676 -54.5769768j), (54.9314613 +42.6654510j)
               ]
             , [ (-20.1201820 -80.1594009j), (-85.2599792 +4.49249840j)
               , (-46.8384094 -51.2807770j), (56.1799889 +38.2473602j)
               ]
             , [ (-21.9134598 -82.4554749j), (-87.8349075 +10.8188457j)
               , (-47.0831413 -47.9806480j), (57.2982254 +33.8532181j)
               ]
             , [ (-23.7205734 -84.4048462j), (-90.2421036 +17.1397209j)
               , (-47.2122803 -44.7046394j), (58.2703209 +29.5110626j)
               ]
             , [ (-25.5279293 -86.0294113j), (-92.4587173 +23.4246140j)
               , (-47.2184334 -41.4763908j), (59.0842972 +25.2442055j)
               ]
             , [ (-27.2951584 -87.4371643j), (-94.6093826 +29.6357555j)
               , (-47.1885300 -38.3026390j), (59.8421402 +21.0647678j)
               ]
             , [ (-29.0989609 -88.4684296j), (-96.3920822 +35.7732048j)
               , (-46.9224739 -35.2244797j), (60.3133621 +16.9923267j)
               ]
             , [ (-30.8816051 -89.2331619j), (-97.9571075 +41.8214340j)
               , (-46.5272980 -32.2332687j), (60.6152763 +13.0304747j)
               ]
             , [ (-32.6304131 -89.7558212j), (-99.3136673 +47.7650375j)
               , (-46.0130768 -29.3383923j), (60.7583122 +9.18906116j)
               ]
             , [ (-34.3320770 -90.0607376j), (-100.474709 +53.5894279j)
               , (-45.3921165 -26.5481663j), (60.7556076 +5.47733164j)
               ]
             , [ (-35.9727058 -90.1724091j), (-101.456413 +59.2804146j)
               , (-44.6787643 -23.8701820j), (60.6227646 +1.90417671j)
               ]
             , [ (-37.5565681 -90.1076660j), (-102.262642 +64.8316727j)
               , (-43.8762054 -21.3064442j), (60.3658333 -1.53073061j)
               ]
             , [ (-39.0769348 -89.8738480j), (-102.890656 +70.2428284j)
               , (-42.9856300 -18.8594112j), (59.9834023 -4.82396841j)
               ]
             , [ (-40.5229797 -89.4931030j), (-103.359749 +75.5039520j)
               , (-42.0226250 -16.5332642j), (59.4932823 -7.97004318j)
               ]
             , [ (-41.8904915 -88.9791183j), (-103.677788 +80.6095886j)
               , (-40.9940834 -14.3305826j), (58.9036446 -10.9663401j)
               ]
             , [ (-43.1762428 -88.3455124j), (-103.853996 +85.5558701j)
               , (-39.9075203 -12.2525635j), (58.2235527 -13.8116732j)
               ]
             , [ (-44.3778839 -87.6058884j), (-103.898972 +90.3404312j)
               , (-38.7711067 -10.2991438j), (57.4629211 -16.5060921j)
               ]
             , [ (-45.4938316 -86.7738647j), (-103.824455 +94.9620209j)
               , (-37.5935860 -8.46924877j), (56.6324196 -19.0506420j)
               ]
             , [ (-46.5231895 -85.8631821j), (-103.643326 +99.4204407j)
               , (-36.3842964 -6.76089382j), (55.7434845 -21.4473019j)
               ]
             , [ (-47.4656181 -84.8877335j), (-103.369537 +103.716362j)
               , (-35.1531258 -5.17130804j), (54.8083076 -23.6987896j)
               ]
             , [ (-48.3213081 -83.8615723j), (-103.017975 +107.851089j)
               , (-33.9104958 -3.69707465j), (53.8397293 -25.8084831j)
               ]
             , [ (-49.0910225 -82.7916794j), (-102.594147 +111.825912j)
               , (-32.6602974 -2.33641911j), (52.8428879 -27.7787018j)
               ]
             , [ (-49.7790489 -81.6842728j), (-102.103172 +115.645714j)
               , (-31.4055233 -1.08469677j), (51.8220863 -29.6152172j)
               ]
             , [ (-50.3878593 -80.5529861j), (-101.561241 +119.314415j)
               , (-30.1568527 +6.380748749E-02j), (50.7906647 -31.3238468j)
               ]
             , [ (-50.9194908 -79.4043808j), (-100.974953 +122.835022j)
               , (-28.9184399 +1.11239779j), (49.7541199 -32.9084625j)
               ]
             , [ (-51.3765411 -78.2447433j), (-100.351036 +126.211273j)
               , (-27.6943626 +2.06496239j), (48.7179260 -34.3735771j)
               ]
             , [ (-51.7621040 -77.0801315j), (-99.6963730 +129.447662j)
               , (-26.4886131 +2.92592406j), (47.6874924 -35.7243042j)
               ]
             , [ (-52.0797920 -75.9164047j), (-99.0179901 +132.549316j)
               , (-25.3051414 +3.70021248j), (46.6682320 -36.9663315j)
               ]
             , [ (-52.3336487 -74.7592697j), (-98.3230286 +135.521973j)
               , (-24.1478653 +4.39321804j), (45.6655540 -38.1058502j)
               ]
             , [ (-52.5281525 -73.6143188j), (-97.6188049 +138.371948j)
               , (-23.0206680 +5.01076889j), (44.6848869 -39.1495628j)
               ]
             , [ (-52.6681709 -72.4870148j), (-96.9127579 +141.106049j)
               , (-21.9274387 +5.55908728j), (43.7316780 -40.1046028j)
               ]
             , [ (-5.975404754E-03 -3.542200476E-02j), (-51.7634392 -55.3201294j)
               , (-37.7107506 -82.5004425j), (37.7107735 +82.5004272j)
               ]
             , [ (-1.65600264 -9.80712223j), (-52.1639366 -54.7130966j)
               , (-37.8567390 -82.2005997j), (37.9525261 +82.0178452j)
               ]
             , [ (-3.26258588 -19.2991772j), (-53.3284111 -52.9422455j)
               , (-38.2752724 -81.3240128j), (38.6517792 +80.6188354j)
               ]
            ])
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        f = s.intrp (xy)
        assert f == pytest.approx (f_fortran, rel = 5e-4)
    # end def test_intrp

    def test_fbar (self):
        # FIXME: This tests only the asymptotic algorithm
        p = np.array \
            ([     1.313135302E+20    -9.577369745E+20j
             ,   727.747253        -5307.36426j
             , -6637.15820        -22547.5352j
             ,    81.8095093        -596.197388j
             ,     8.33607674        -60.2175865j
            ])
        fbar = np.array \
            ([ -7.025844502E-23 -5.124310184E-22j
             , -1.265434457E-05 -9.247713024E-05j
             ,  6.008236141E-06 -2.040637264E-05j
             , -1.109536897E-04 -8.236993453E-04j
             , -9.295953787E-04 -8.194359019E-03j
            ])
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        r = s.fbar (p)
        assert r == pytest.approx (fbar, rel = 1e-6)
    # end def test_fbar

    def test_gwave (self):
        dim = 12
        xx1 = np.zeros (dim, dtype = complex)
        r1  = np.ones  (dim)
        zmh = np.ones  (dim)
        zph = np.ones  (dim) * 1.20080054
        zph [-1] = 1.24140942
        xx2 = np.array \
            ([  0.304228932     -0.952598929j
             ,  0.295098215     -0.955466926j
             ,  0.267615646     -0.963525772j
             ,  0.221568510     -0.975144804j
             ,  0.156771392     -0.987634897j
             ,  7.331952453E-02 -0.997308493j
             , -2.810475603E-02 -0.999605000j
             , -0.145873666     -0.989303231j
             , -0.277071446     -0.960849345j
             , -0.417209446     -0.908810377j
             , -0.560068488     -0.828446329j
             ,  0.0539499931    -0.99854362j
            ])
        r2 = np.array \
            ([ 1.20080054
             , 1.20232379
             , 1.20688212
             , 1.21444118
             , 1.22494566
             , 1.23832035
             , 1.25447357
             , 1.27329957
             , 1.29468191
             , 1.31849587
             , 1.34461260
             , 1.24140942
            ])
        expect = np.array \
            ([ [   6.099362349E-09  -4.404026477E-09j
               ,  -2.47124505      -24.0592613j
               ,  58.1817513       -11.8325977j
               ,  -6.099362349E-09  +4.404026477E-09j
               , -58.3126411       +11.6760159j
               ]
             , [   3.03673458  -2.23649383j
               ,  -2.84364319 -23.8468246j
               ,  57.7878647  -12.2743444j
               ,  -3.03673458  +2.23649383j
               , -58.1920090  +12.1760225j
               ]
             , [   5.85553551  -4.57271147j
               ,  -3.92785120 -23.1895390j
               ,  56.6000023  -13.5633392j
               ,  -5.85553551  +4.57271147j
               , -57.8052864  +13.6660595j
               ]
             , [   8.24379444  -7.08304358j
               ,  -5.62521553 -22.0329361j
               ,  54.6028404  -15.5929203j
               ,  -8.24379444  +7.08304358j
               , -57.0795593  +16.1139889j
               ]
             , [  10.0018997   -9.79471588j
               ,  -7.77367115 -20.3031826j
               ,  51.7806892  -18.1935673j
               , -10.0018997   +9.79471588j
               , -55.8980446  +19.4604397j
               ]
             , [  10.9541426 -12.6717606j
               , -10.1528463 -17.9302769j
               ,  48.1306686 -21.1444206j
               , -10.9541426 +12.6717606j
               , -54.1078300 +23.6102562j
               ]
             , [  10.9641027 -15.6087198j
               , -12.4953346 -14.8749409j
               ,  43.6766319 -24.1899357j
               , -10.9641027 +15.6087198j
               , -51.5314140 +28.4232540j
               ]
             , [   9.95179462 -18.4340115j
               , -14.5047474  -11.1556454j
               ,  38.4819832  -27.0592651j
               ,  -9.95179462 +18.4340115j
               , -47.9828415  +33.7043076j
               ]
             , [   7.91078234 -20.9246101j
               , -15.8820152   -6.86998653j
               ,  32.6582222  -29.4882774j
               ,  -7.91078234 +20.9246101j
               , -43.2883339  +39.1963158j
               ]
             , [   4.92119598 -22.8302727j
               , -16.3581543   -2.20621753j
               ,  26.3672485  -31.2418518j
               ,  -4.92119598 +22.8302727j
               , -37.3110008  +44.5776482j
               ]
             , [   1.15526426 -23.9051399j
               , -15.7304773   +2.55926919j
               ,  19.8163795  -32.1342506j
               ,  -1.15526426 +23.9051399j
               , -29.9782848  +49.4669952j
               ]
             , [   4.68680028e-09  -5.46254286e-09j
               ,  -7.75052452     -21.1894817j
               ,  51.7356796      -24.8215351j
               ,  -4.68680028e-09  +5.46254286e-09j
               , -51.8860703      +24.7143097j
               ]
            ])
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        r = s.gwave (xx1, xx2, r1, r2, zmh, zph).T
        assert r == pytest.approx (expect, rel = 2e-5)
    # end def test_gwave

    def test_compute_incom (self):
        p = np.array \
            ([ [6.91636605E-03, 0.999976099, 0]
             , [6.91636559E-03, 0.999976099, 0]
             , [6.91636326E-03, 0.999976099, 0]
            ])
        sn_e  = np.array ([1.0, 1.0, 1.0])
        xsn_e = np.array ([6.91636605E-03, 6.91636559E-03, 6.91636326E-03])
        ysn_e = np.array ([0.999976099, 0.999976099, 0.999976099])
        s = Sommerfeld (4.0, .001, 10.0)
        sn, xsn, ysn = s.compute_incom (p)
        assert  sn == pytest.approx (sn_e,  rel = 1e-7)
        assert xsn == pytest.approx (xsn_e, rel = 1e-7)
        assert ysn == pytest.approx (ysn_e, rel = 1e-7)
    # end def test_compute_incom

    def test_sflds (self):
        # Debugging norton approx in fortran, breakpoint nec2a.f
        # at start of SFLDS after computing XT, YT, ZT:
        # cond 1 xt.ge.0.000627691159 .and. xt.lt.0.00062769116 .and. \
        #        xo.ge.0.000681992736 .and. xo.lt.0.000681992738
        # This is index [13,10] or [54] after filtering in python
        # Without norton approx:
        # cond 1 xt.ge.6.27691159E-04 .and. xt.lt.6.2769116E-04 .and. \
        #        xo.ge.3.19275725E-03 .and. xo.lt.3.19275727E-03
        # This is index [13, 5] or [108] after filtering in python
        p = np.array \
            ([ [1.04615197E-03, -0.181504667,     0.560058296]
             , [1.25538232E-03, -0.151253894,     0.529735029]
             , [1.46461267E-03, -0.121003129,     0.499411732]
             , [1.56922790E-03, -0.105877742,     0.484250098]
             , [1.67384301E-03, -9.07523558E-02,  0.469088495]
             , [1.98768894E-03, -4.53761928E-02,  0.423603594]
             , [2.51076464E-03,  3.02507449E-02,  0.347795516]
             , [3.55691649E-03,  0.181504607,     0.196179241]
             , [4.07999195E-03,  0.257131517,     0.120371111]
             , [4.60306881E-03,  0.332758516,     4.45630439E-02]
             , [6.27691159E-04, -0.242006212,     0.620704710]
             , [8.36921565E-04, -0.211755440,     0.590381444]
             , [9.41536797E-04, -0.196630046,     0.575219929]
            ])
        obs = np.array \
            ([ [1.10045355E-03, -0.181505039,     0.560058296]
             , [1.51891424E-03, -0.121003501,     0.499411732]
             , [1.93737529E-03, -6.05019517E-02,  0.438765228]
             , [2.24723294E-03,  3.47744390E-07,  0.378118753]
             , [2.66569364E-03,  6.05018958E-02,  0.317472249]
             , [3.19275726E-03,  0.121002689,     0.256825745]
             , [3.61121795E-03,  0.181504235,     0.196179241]
             , [4.02967865E-03,  0.242005765,     0.135532737]
             , [4.33953665E-03,  0.302508116,     7.48862699E-02]
             , [5.73389581E-04, -0.242005840,     0.620704710]
             , [6.81992737E-04, -0.242006585,     0.620704710]
             , [9.91850393E-04, -0.181504294,     0.560058296]
            ])
        dirvec = [[4.88481205E-03, 0.706251740, -0.707943916]] * len (p)
        dirvec = np.array (dirvec)

        # 1: norton approx. -1: no norton approx 0: not computed in fortran
        norton = np.array \
            ( [ [ 1,  1,  0,  0,  0, -1, -1, -1,  0,  0,  1, 0]
              , [ 0,  0,  0, -1,  0, -1, -1, -1,  0,  0,  0, 0]
              , [ 0,  1,  0, -1,  0, -1, -1, -1,  0,  1,  0, 1]
              , [ 0,  0,  0, -1,  0, -1, -1, -1,  0,  0,  0, 0]
              , [ 0,  0,  0, -1,  0, -1, -1, -1,  0,  0,  0, 0]
              , [ 0, -1, -1,  0,  0, -1, -1, -1,  0,  0,  0, 0]
              , [-1, -1, -1,  0,  0, -1, -1, -1, -1,  0,  0, 0]
              , [-1,  0,  0, -1, -1,  0, -1, -1, -1,  0,  0, 0]
              , [-1,  0,  0, -1,  0,  0,  0, -1, -1, -1,  0, 0]
              , [-1,  0,  0, -1, -1,  0, -1, -1,  0,  0, -1, 0]
              , [ 1,  1,  1,  0,  0, -1, -1, -1,  0,  0,  1, 0]
              , [ 0,  0,  0,  0,  0, -1, -1, -1,  0,  0,  0, 0]
              , [ 0,  0,  0,  0,  0, -1, -1, -1,  0,  0,  0, 0]
              ]
            , dtype = int
            )
        e_exp = np.array \
            ([ [ [ -1.479489263E-02 -1.333101932E-02j # N+
                 , -2.18665695      -1.93671846j
                 ,  0.245552823     -0.139106095j
                 ]
               , [ -9.253193624E-03 -1.781395264E-02j # N+
                 , -1.34554195      -2.59391427j
                 ,  0.364787430     +0.115157321j
                 ]
               , [ 0, 0, 0]
               , [ 0, 0, 0]
               , [ 0, 0, 0]
               , [  0.0879885703 -0.173560768j # N-
                 , 12.9253159   -25.4259586j
                 ,  4.42753696  +22.5067329j
                 ]
               , [  0.0964317918   -0.133514762j # N- nicht ganz
                 , 14.2218609     -19.6161804j
                 , -0.00888347626 +26.4897022j
                 ]
               , [  0.0811291188 -0.0966647118j # N-
                 , 12.0651741   -14.2677708j
                 , -3.30508995  +29.7896824j
                 ]
               , [ 0, 0, 0]
               , [ 0, 0, 0]
               , [ -1.886133477E-02 -6.677391008E-03j # N+
                 , -2.74393249      -0.974853337j
                 ,  2.260471508E-02 -0.268594116j
                 ]
               , [ 0, 0, 0]
               ]
             # 1
             , [ [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [ 0.0529750288 -0.248088196j # N-
                 , 7.56234312  -35.5275764j
                 , 9.76059723  +13.6421795j
                 ]
               , [0, 0, 0]
               , [  0.139092162  -0.161659092j # N-
                 , 20.4163837   -23.673254j
                 , -0.958456039 +24.2785568j
                 ]
               , [  0.139858574 -0.11654371j # N-
                 , 20.6083355  -17.1072941j
                 , -7.11052179 +27.5258331j
                 ]
               , [ 0.114926971  -0.0811866075j # N-
                 , 17.0626354  -11.9559069j
                 , -12.0166569 +30.2508183j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 2
             , [ [0, 0, 0]
               , [ -1.556018251E-03 -2.221593075E-02j # N+
                 , -0.263038278     -3.26030326j
                 ,  0.336004108     +0.108885646j
                 ]
               , [0, 0, 0]
               , [  0.113102593 -0.249530748j # N-
                 , 16.1695557  -35.7386971j
                 ,  7.46070671 +15.6139755j
                 ]
               , [0, 0, 0]
               , [  0.190660268 -0.136565879j # N-
                 , 27.9739075  -19.9856415j
                 , -6.82889509 +24.8252487j
                 ]
               , [   0.182405606 -0.0871457532j # N-
                 ,  26.862114   -12.7690287j
                 , -14.7258511  +26.7805729j
                 ]
               , [   0.147740588 -0.0552757308j # N-
                 ,  21.908165    -8.09863091j
                 , -21.3026619  +28.3317814j
                 ]
               , [0, 0, 0]
               , [ -1.703507453E-02 -1.436620019E-02j # N+
                 , -2.44920731      -2.06139541j
                 ,  9.810665622E-03 -0.393969625j
                 ]
               , [0, 0, 0]
               , [ -1.012023818E-02 -2.033338137E-02j # N+
                 , -1.45650089      -2.91633534j
                 ,  0.254087985     -0.206509754j
                 ]
               ]
             # 3
             , [ [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [  0.144358262 -0.245591044j # N-
                 , 20.6439495  -35.1772575j
                 ,  6.23384571 +16.4301586j
                 ]
               , [0, 0, 0]
               , [  0.215729684 -0.118776523j # N-
                 , 31.6471367  -17.3728828j
                 , -9.85453606 +24.6071301j
                 ]
               , [   0.202426136 -0.0674917623j # N-
                 ,  29.803257    -9.87069988j
                 , -18.5864792  +25.6826077j
                 ]
               , [   0.162991688 -0.0381211229j # N-
                 ,  24.1571541   -5.54838228j
                 , -25.9804058  +26.3887672j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 4
             , [ [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [  0.17600739 -0.238396317j # N-
                 , 25.1748047 -34.1500244j
                 ,  4.9807663 +17.1352348j
                 ]
               , [0, 0, 0]
               , [   0.239791885 -0.0973890871j # N-
                 ,  35.1721382  -14.2324619j
                 , -12.8834267  +24.0529633j
                 ]
               , [   0.221079886 -0.0444548279j # N-
                 ,  32.542263    -6.47461557j
                 , -22.4055996  +24.0864887j
                 ]
               , [   0.17699948 -0.0180578772j # N-
                 ,  26.2200718  -2.56781912j
                 , -30.5726662 +23.7565212j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 5
             , [ [0, 0, 0]
               , [  0.0622633994 -0.315091848j # N-
                 ,  9.10006046  -45.9076042j
                 , 12.3617964    +3.68862987j
                 ]
               , [  0.17971772 -0.273136139j # N-
                 , 26.2394581 -39.8192787j
                 ,  9.0231142 +12.147047j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [   0.301816016 -0.0116762603j # N-
                 ,  44.2532539   -1.65090728j
                 , -21.6012287  +20.4414158j
                 ]
               , [   0.264475167 +0.0449540131j # N-
                 ,  38.9031868   +6.69924116j
                 , -33.0090981  +16.3278008j
                 ]
               , [   0.207452506 +0.0599612668j # N-
                 ,  30.6824932   +9.00894451j
                 , -42.9218521  +11.6361723j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 6
             , [ [  0.0574495308 -0.352368355j # N-
                 ,  8.39758301  -51.3062782j
                 , 14.6925364    -4.33532763j
                 ]
               , [  0.211781919 -0.308909327j # N-
                 , 30.894577   -44.9959183j
                 , 14.499815    +6.01545954j
                 ]
               , [  0.332765013 -0.204134896j # N-
                 , 48.5646362  -29.7381649j
                 ,  7.91498184 +15.2875566j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [   0.346116424 +0.196702152j # N-
                 ,  50.7092018  +28.9252758j
                 , -32.9143143   +9.21997261j
                 ]
               , [   0.266053736 +0.255356699j # N-
                 ,  39.0661583  +37.6759262j
                 , -44.3595161   -5.1323452j
                 ]
               , [   0.189448595 +0.246035188j # N-
                 ,  27.8916912  +36.5629196j
                 , -52.8225937  -21.3475723j
                 ]
               , [   0.144788891 +0.185721397j # N-
                 ,  20.5029869  +25.6863842j
                 , -61.0647507  -34.7521095j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 7
             , [ [  0.302945673 -0.337289453j # N-
                 , 44.168293   -49.0907288j
                 , 29.8673706   -2.91580296j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [  0.504789054 +0.353147656j # N-
                 , 72.2954102  +50.4350853j
                 , -9.87189388 +30.7765579j
                 ]
               , [   0.333003491 +0.596220672j # N-
                 ,  47.7067986  +85.0909576j
                 , -31.6855373  +17.0127678j
                 ]
               , [0, 0, 0]
               , [  -0.214860022 +0.749823689j # N-
                 , -31.9718723 +110.312477j
                 , -34.6556282  -54.247879j
                 ]
               , [  -0.41542384  +0.658039808j # N-
                 , -62.0413017  +97.1764755j
                 ,  -1.15195465 -97.7938156j
                 ]
               , [  -0.455192566 +0.546748161j # N-
                 , -62.6931076  +77.008194j
                 ,  50.0660477 -137.691498j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 8
             , [ [  0.39040038 -0.308240086j # N-
                 , 56.9196129 -44.8465881j
                 , 41.9467697  -1.11852837j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [   0.48148641 +0.554713726j # N-
                 ,  69.0061035 +79.2423325j
                 , -13.1560116 +46.9774361j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [   -1.22179532  +0.625913024j # N-
                 , -181.590942   +91.7777557j
                 ,   44.7541084 -116.713989j
                 ]
               , [   -1.52049339 +0.297370464j # N-
                 , -211.603165  +43.6385574j
                 ,  192.339264 -124.830536j
                 ]
               , [  0.172654748 -0.422072768j # N-
                 , 24.7383308  -60.6288605j
                 , 32.7943382  -22.8343468j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 9
             , [ [  0.442123204 -0.294750541j # N-
                 , 64.4735489  -42.8683815j
                 , 56.966114    -0.165260315j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [   0.47129333 +0.695168257j # N-
                 ,  67.601738  +99.2827759j
                 , -16.5955544 +73.6049194j
                 ]
               , [   0.0795651004 +1.0213902j # N-
                 ,  11.7228479  +145.790833j
                 , -64.4993286   +54.4419098j
                 ]
               , [0, 0, 0]
               , [   -1.36510885 +0.979698777j # N-
                 , -201.792755 +143.472244j
                 ,  -79.8394012 -82.8129501j
                 ]
               , [   -2.39355493  +0.26629135j # N-
                 , -355.216583   +37.2385483j
                 ,   32.8478317 -154.91478j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [  0.210720763 -0.425581485j # N-
                 , 30.7485352  -61.9345245j
                 , 44.1032906  -28.6935921j
                 ]
               , [0, 0, 0]
               ]
             # 10
             , [ [ -1.717896387E-02 -5.863992497E-03j # N+
                 , -2.49864578      -0.854068398j
                 ,  0.267316490     -0.148092166j
                 ]
               , [ -1.398058329E-02 -1.113149617E-02j # N+
                 , -2.03449416      -1.62221456j
                 ,  0.423553199     +4.418341815E-02j
                 ]
               , [ -9.500402957E-03 -1.446326636E-02j # N+
                 , -1.38279545      -2.10920286j
                 ,  0.480209112     +0.306946456j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [ -0.00325001939 -0.163540021j # N-
                 , -0.452261209  -23.9695511j
                 , 12.7656126    +16.0104275j
                 ]
               , [  0.0163928047 -0.135492444j # N- (nicht ganz)
                 ,  2.44454694  -19.9267597j
                 , 11.2963448   +20.1670246j
                 ]
               , [  0.0186181925 -0.10142722j # N-
                 ,  2.80889606  -15.0067902j
                 , 10.5923595   +23.3395615j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [ -1.800204255E-02 +5.922984565E-04j # N+
                 , -2.63667440      +0.105384260j
                 ,  5.505881831E-02 -0.224744305j
                 ]
               , [0, 0, 0]
               ]
             # 11
             , [ [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [ 0.0398555212 -0.173616886j # N- XXXX
                 , 5.86847019  -25.4410267j
                 , 9.07039833  +19.675869j
                 ]
               , [ 0.0546052568 -0.139311105j # N- XXXX
                 , 8.0682869   -20.4795666j
                 , 6.21838856  +23.9294205j
                 ]
               , [ 0.0484883264 -0.102953255j # N- XXXX
                 , 7.23386621  -15.217061j
                 , 4.34328079  +27.3362617j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
             # 12
             , [ [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [ 0.0634108633 -0.174969718j # N-
                 , 9.32208729  -25.6360664j
                 , 6.85610771  +21.2107735j
                 ]
               , [  0.0751813948 -0.137718335j # N-
                 , 11.0957499   -20.2401257j
                 ,  3.23340321  +25.3811646j
                 ]
               , [ 0.0645539686 -0.100875877j # N-
                 , 9.61236286  -14.900672j
                 , 0.675898552 +28.7850494j
                 ]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               , [0, 0, 0]
               ]
            ])
        norton = np.reshape (np.repeat (norton, 3), e_exp.shape)
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        e = s.sflds (p, dirvec, obs)
        seglen = 0.08566568262741331
        # Check data entry correctness
        for k in range (13):
            print (k, (e_exp [k] [norton [k] != 0] != 0).all ())
            print (k, (e_exp [k] [norton [k] == 0] == 0).all ())
        assert (e_exp [norton != 0] != 0).all ()
        assert (e_exp [norton == 0] == 0).all ()

        cnd = norton == -1
        assert e [cnd] == pytest.approx (e_exp [cnd], rel = 1.5e-3)
        cnd = norton == 1
        assert e [cnd] * seglen == pytest.approx (e_exp [cnd], rel = 2e-2)
    # end def test_sflds

    def test_direct_field (self):
        e1 = np.array \
            ([ [ [0j, 1033.84677189 +839.83434586j, 0j]
               , [0j, 1107.21046542+1523.94446675j, 0j]
               , [0j, 1033.84677189 +839.83434586j, 0j]
               , [0j, 1107.21046542+1523.94446675j, 0j]
               , [0j, 1107.21046542+1523.94446675j, 0j]
               , [0j, 1033.84677189 +839.83434586j, 0j]
               , [0j, 1107.21046542+1523.94446675j, 0j]
               , [0j, 1033.84677189 +839.83434586j, 0j]
               ]
            ])
        e2 = np.array \
            ([ [ [0j, 0j, 1033.84677189 +839.83434586j]
               , [0j, 0j, 1107.21046542+1523.94446675j]
               , [0j, 0j, 1033.84677189 +839.83434586j]
               , [0j, 0j, 1107.21046542+1523.94446675j]
               , [0j, 0j, 1107.21046542+1523.94446675j]
               , [0j, 0j, 1033.84677189 +839.83434586j]
               , [0j, 0j, 1107.21046542+1523.94446675j]
               , [0j, 0j, 1033.84677189 +839.83434586j]
               ]
            ])
        # Simple dipole at (0, 0, 0.05) in y-direction as source
        h = 0.05
        p = np.array ([[0, 0, h]])
        dirvec = np.array ([[0, 1, 0]])
        # Points around source, avoiding source itself
        obs = np.array \
            ([ [-.1, -.1, h]
             , [0.0, -.1, h]
             , [ .1, -.1, h]
             , [-.1, 0.0, h]
             , [ .1, 0.0, h]
             , [-.1,  .1, h]
             , [0.0,  .1, h]
             , [ .1,  .1, h]
             ])
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        e = s.direct_field (p, dirvec, obs)
        assert e == pytest.approx (e1, rel = 1e-8)
        dirvec = np.array ([[0, 0, 1]])
        e = s.direct_field (p, dirvec, obs)
        assert e == pytest.approx (e2, rel = 1e-8)
    # end def test_direct_field

# end class Test_Base
