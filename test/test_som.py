#!/usr/bin/python3

import pytest
import numpy as np
from sompy import Sommerfeld

class Test_Base:

    def test_saoa_bessel (self):
        vals = \
            [ [ -3.11803722    +1.3262701j
              ,  5.93318653    -3.36045551j
              ,  0.139051959   -0.414679796j
              , -3.11248446    +1.33915186j
              ,  0.00753160566 +0.0176054034j
              ,  2.58885336    -0.97795552j
              ]
            , [ -2.64690518    +0.917380214j
              ,  5.22539663    -2.02546954j
              ,  0.294826061   -0.657950521j
              , -2.63087296    +0.960900962j
              ,  0.0013268512  +0.00372831593j
              ,  2.20666766    -0.518677175j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.zeros (s.rho.shape, dtype = complex)
        s.b = np.ones  (s.rho.shape, dtype = complex) * (53.2088928-53.2088928j)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [7] = 1
        result = []
        t = np.ones (s.rho.shape) * .25
        r = s.saoa (t, cond = cond)
        result.append (r [0])
        r = s.saoa (t * 2, cond = cond)
        result.append (r [0])
        result = np.array (result)
        assert result.shape == vals.shape
        assert result == pytest.approx (vals, rel = 1e-5)
    # end def test_saoa_bessel

    def test_saoa_hankel (self):
        vals = \
            [ [ -2.138304      -1.14035702j
              ,  0.121376038   +0.0647298098j
              , -0.153132051   +0.287140638j
              ,  2.12156224    +1.13142872j
              , -0.00265042298 -0.0014134699j
              ,  0.0364189744  +0.029970834j
              ]
            , [ -2.17637038    -1.22720146j
              ,  0.120408714   +0.0678955019j
              , -0.162322715   +0.2878699j
              ,  2.15976238    +1.2178365j
              , -0.00262929988 -0.0014825972j
              ,  0.0358796231  +0.0309694745j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.ones (s.rho.shape, dtype = complex) * 2.51327419j
        s.b = np.ones (s.rho.shape, dtype = complex) * (3.76991153 -1.2566371j)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        t = np.zeros (s.rho.shape)
        r = s.saoa (t, cond = cond)
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-5)
    # end def test_saoa_hankel

    def test_rom1_bessel (self):
        vals = \
            [ [ 0j, 0j, 0j, 0j, 0j, 0j ] # not computed for bessel
            , [ -2.31588697    +0.480371684j
              ,  4.71199608    -1.50895941j
              ,  0.324989647   -0.507604897j
              , -2.30867672    +0.528231323j
              , -0.00221469323 +0.012674178j
              ,  1.96858811    -0.311186165j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.zeros (s.rho.shape, dtype = complex)
        s.b = np.ones  (s.rho.shape, dtype = complex) * (53.2088928-53.2088928j)
        r = s.rom1 (2, s.is_bessel)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [7] = 1
        r = r [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_rom1_bessel

    def test_rom1_hankel (self):
        vals = \
            [ [ -1.44701922    +1.97692227j
              ,  0.126062781   -0.0513910204j
              ,  0.224961758   +0.193945825j
              ,  1.45205915    -1.99802136j
              , -0.00332087232 +0.00183619559j
              ,  0.044633951   -0.00629247818j
              ]
            , [ 0j, 0j, 0j, 0j, 0j, 0j ] # not computed for hankel
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.ones (s.rho.shape, dtype = complex) * 2.51327419j
        s.b = np.ones (s.rho.shape, dtype = complex) * (3.76991153 -1.2566371j)
        r = s.rom1 (2, s.is_hankel)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [7] = 1
        r = r [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_rom1_hankel

    def test_gshank_bessel (self):
        seed = \
            [ [ -2.31588697    +0.480371684j
              ,  4.71199608    -1.50895941j
              ,  0.324989647   -0.507604897j
              , -2.30867672    +0.528231323j
              , -0.00221469323 +0.012674178j
              ,  1.96858811    -0.311186165j
              ]
            , [ -2.18897271    +0.478487819j
              ,  4.46816778    -1.46256638j
              ,  0.149093568   -0.235078514j
              , -2.18731856    +0.48920086j
              , -0.00232726359 +0.0125354007j
              ,  1.86808836    -0.306106269j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [ -2.80080628  -0.413829148j
              ,  5.88886356  +0.292651534j
              ,  1.12654698  -0.116916478j
              , -2.99543357  -0.385962725j
              , -0.002336937 +0.0128434291j
              ,  2.34222507  +0.4738428j
              ]
            , [ -2.87119198    -0.397920609j
              ,  5.88670492    +0.286414981j
              ,  0.559056878   -0.0576702692j
              , -2.91910267    -0.391062587j
              , -0.00244203862 +0.0127298869j
              ,  2.34124136    +0.470980108j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        b = np.zeros (s.rho.shape, dtype = complex)
        b [7] = 53.2088928 -53.2088928j
        b [8] = 50.7713356 -50.7713356j
        d = np.array ([33.4321327 +0j, 31.9005718 +0j])
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [7] = cond [8] = 1
        r = s.gshank (b, d, seed, cond) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_bessel

    def test_gshank_hankel (self):
        seed = \
            [ [  2.00776601   -8.01187611j
              , -0.272398651  +0.0381847322j
              , -0.706325531  -0.50113225j
              , -2.06688285   +8.25211906j
              ,  0.0083973892 -0.00705266185j
              , -0.0908726901 -0.0253810994j
              ]
            , [  2.19408679    -8.17548943j
              , -0.27332291    +0.0343347378j
              , -0.7048949     -0.517745733j
              , -2.25558758    +8.4144516j
              ,  0.00848118961 -0.00692269811j
              , -0.0907073617  -0.0266431328j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [  13.0748482   -10.4512615j
              , -2.36912513   +0.433109283j
              , -1.41920185   -4.10852337j
              , -11.2865829   +10.357749j
              ,  0.0147127882 -0.00860253721j
              , -0.933717251  +0.0110758897j
              ]
            , [  13.7067928   -9.71621895j
              , -2.41830635   +0.102204993j
              , -0.954755962  -4.22943687j
              , -11.8771076   +9.93634701j
              ,  0.0149100628 -0.00816507265j
              , -0.934709907  -0.12284977j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        st = np.zeros (s.rho.shape, dtype = complex)
        st [0] = 2.51327419j
        st [1] = 2.51327419j
        d = np.array ([-0.0314159133 +31.4159126j, -5.53947687 +31.4159298j])
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        r = s.gshank (st, d, seed, cond) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_hankel

    def test_gshank_hankel_recursive (self):
        seed = \
            [ [ -13.0748482   +10.4512615j
              ,  2.36912513   -0.433109283j
              ,  1.41920185   +4.10852337j
              ,  11.2865829   -10.357749j
              , -0.0147127882 +0.00860253721j
              ,  0.933717251  -0.0110758897j
              ]
            , [ -13.7067928   +9.71621895j
              ,  2.41830635   -0.102204993j
              ,  0.954755962  +4.22943687j
              ,  11.8771076   -9.93634701j
              , -0.0149100628 +0.00816507265j
              ,  0.934709907  +0.12284977j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [ 0.103320166     -0.988833129j
              ,  5.96449757     +0.454928935j
              ,  6.3460722      -0.759163558j
              , -6.10379219     -0.0741284937j
              ,  0.000911501935 +0.0154020973j
              ,  2.37479591     +0.548333287j
              ]
            , [ -0.784671187    -0.825073123j
              ,  5.94271421     +0.419626474j
              ,  5.33457327     -0.620028794j
              , -5.16232586     -0.182956994j
              ,  0.000108209628 +0.0149045251j
              ,  2.36532521     +0.532098413j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        st = np.zeros (s.rho.shape, dtype = complex)
        st [0] = 6.40884924 -1.2566371j
        st [1] = 6.40884924 -1.2566371j
        d  = np.array ([26.8740673   +16.2709866j, 27.2886486  +16.5219936j])
        d2 = np.array ([0.0314159133 +31.4159126j,  5.53947687 +31.4159298j])
        bk = np.zeros (s.rho.shape, dtype = complex)
        bk [0] = 12.9941263 +2.73043895j
        bk [1] = 12.9941263 +2.73043895j
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        r = s.gshank (st, d, seed, cond, bk, d2) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_hankel_recursive

    def test_evlua (self):
        vals = \
            [ [  1056.00671 -330.47583j
              ,  872.122375 -593.691833j
              ,  1150.5542  -498.038666j
              , -905.507202 +534.14978j
              ]
            , [  886.40332  -280.664612j
              ,  867.573914 -581.21875j
              ,  1112.45508 -495.226624j
              , -939.632324 +520.576355j
              ]
            , [  186.194336 -61.4843178j
              ,  858.612061 -537.646362j
              ,  1027.47156 -479.358215j
              , -1019.78796 +480.458313j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        erv, ezv, erh, eph = s.evlua ()
        result = []
        result.append ([erv [0], ezv [0], erh [0], eph [0]])
        result.append ([erv [1], ezv [1], erh [1], eph [1]])
        result.append ([erv [7], ezv [7], erh [7], eph [7]])
        result = np.array (result)
        assert result.shape == vals.shape
        assert result == pytest.approx (vals, rel = 1e-3)
    # end def test_evlua

    def test_intrp (self):
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        f = s.intrp (0.0941202119, 1.24357438)
        # debug: ix = 1, iy = 2
        # igr = 1
        # nxm2 = 9, nym2 = 8, nxms = 10, nyms = 10
        # nd = 11, ndp = 110
        # ix = 5, iy = 8
        # ixs = 5, iys = 8
        # iadz = -50
        # iadz = 60, iadd = 60
        # iadd = 71
        # p1 = (-4.78508759,-30.358078)
        # p2 = (-5.00539017,-31.0933762)
        # p3 = (-5.33587933,-31.5738068)
        # p4 = (-5.69823742,-31.8597355)
        #
        # p1 = (-3.19897223,-19.9382172)
        # p2 = (-3.34043503,-20.3974686)
        # p3 = (-3.54492855,-20.6934471)
        # p4 = (-3.76416111,-20.8671627)
        #
        # p1 = (-1.60163283,-9.88088989)
        # p2 = (-1.67065883,-10.1019974)
        # p3 = (-1.76828527,-10.2432241)
        # p4 = (-1.87137985,-10.3255119)
        #
        # p1 = (-1.53017368e-06,-9.4078041e-06)
        # p2 = (-1.19655647e-06,-7.21218748e-06)
        # p3 = (-1.01227943e-06,-5.84947156e-06)
        # p4 = (-8.91765012e-07,-4.91314859e-06)
        #
        #
        # p1 = (-52.7491913,-66.5928955)
        # p2 = (-55.0257187,-57.6496315)
        # p3 = (-56.0031357,-49.8054276)
        # p4 = (-56.11726,-42.9457855)
        #
        # p1 = (-51.2856941,-66.8334656)
        # p2 = (-53.0523453,-58.2296104)
        # p3 = (-53.6064835,-50.7796974)
        # p4 = (-53.375679,-44.3542099)
        #
        # p1 = (-50.4326477,-66.9806137)
        # p2 = (-51.9128342,-58.5842667)
        # p3 = (-52.2262115,-51.3843536)
        # p4 = (-51.8077278,-45.2150841)
        #
        # p1 = (-50.1507034,-67.035553)
        # p2 = (-51.5386925,-58.7084045)
        # p3 = (-51.7757492,-51.5885162)
        # p4 = (-51.2977104,-45.5042839)
        #
        #
        # p1 = (-38.7210579,-89.9378052)
        # p2 = (-39.3616333,-84.4900513)
        # p3 = (-39.293705,-79.8347321)
        # p4 = (-38.7842293,-75.8621216)
        #
        # p1 = (-38.0743484,-89.7170029)
        # p2 = (-38.4845619,-84.4968872)
        # p3 = (-38.2477913,-80.08638)
        # p4 = (-37.6148262,-76.3747559)
        #
        # p1 = (-37.7002258,-89.5858459)
        # p2 = (-37.9843597,-84.5034332)
        # p3 = (-37.6466217,-80.2531738)
        # p4 = (-36.9479828,-76.6933441)
        #
        # p1 = (-37.5752792,-89.5483627)
        # p2 = (-37.8184128,-84.5122681)
        # p3 = (-37.4505768,-80.3113022)
        # p4 = (-36.7315674,-76.8008881)
        #
        #
        # p1 = (39.5129509,88.2076492)
        # p2 = (40.2861099,82.6928101)
        # p3 = (40.3286247,77.9630585)
        # p4 = (39.910408,73.9122543)
        #
        # p1 = (38.415184,88.9653549)
        # p2 = (38.8813095,83.715477)
        # p3 = (38.6906281,79.2721405)
        # p4 = (38.0953026,75.5266037)
        #
        # p1 = (37.7838554,89.400528)
        # p2 = (38.0815201,84.3106308)
        # p3 = (37.7549057,80.0522232)
        # p4 = (37.0652924,76.4839554)
        #
        # p1 = (37.5752792,89.5483627)
        # p2 = (37.8184128,84.5122681)
        # p3 = (37.4505768,80.3113022)
        # p4 = (36.7315598,76.8008957)
        #
        # a (((0.0130529404,-0.0100609465),
        # (0.00804861356,-0.00683498383),
        # (0.00385538745,-0.00349028897),
        # (1.42629233e-08,6.77512944e-08))
        # ((-0.0726362839,0.0190830231), (-0.0712617263,0.0215860996),
        # (-0.0724913254,0.0276317596), (-0.0726394653,0.0286006927))
        # ((-0.0444927216,0.0182876587), (-0.041798275,0.0184542332),
        # (-0.0434951782,0.0236206055), (-0.0432993583,0.0240961704))
        # ((0.0449854545,-0.0176900234), (0.0420271568,-0.0181236267),
        # (0.0435466766,-0.0235582981), (0.0432980843,-0.0240949001)))
        #
        # b (((-0.0550932884,0.127433777), (-0.0315153599,0.0816364288),
        # (-0.0143002272,0.0399403572),
        # (-7.46700834e-08,-4.16450348e-07))
        # ((0.649555206,-0.549530029), (0.606256485,-0.576971054),
        # (0.583404541,-0.59821701), (0.575466156,-0.603630066))
        # ((0.354251862,-0.396217346), (0.32349205,-0.40480423),
        # (0.310935974,-0.41607666), (0.305484772,-0.417564392))
        # ((-0.365322113,0.392543793), (-0.328403473,0.403270721),
        # (-0.312139511,0.415744781), (-0.305484772,0.417564392)))
        #
        # c (((-0.288448662,-0.597803771), (-0.181026772,-0.370779663),
        # (-0.0871815681,-0.177676842), (2.4468423e-07,1.71141494e-06))
        # ((-1.55433905,8.37465668), (-1.08913422,8.00530148),
        # (-0.824289918,7.77050257), (-0.739885926,7.69491577))
        # ((-0.241832718,5.0332489), (-0.0449231379,4.79685974),
        # (0.0702972487,4.6427207), (0.105651863,4.59443903))
        # ((0.362850189,-5.10460424), (0.0956929475,-4.82848597),
        # (-0.0580215529,-4.65059137), (-0.105651863,-4.59443903)))
        #
        # d (((-5.00539017,-31.0933762), (-3.34043503,-20.3974686),
        # (-1.67065883,-10.1019974), (-1.19655647e-06,-7.21218748e-06))
        # ((-55.0257187,-57.6496315), (-53.0523453,-58.2296104),
        # (-51.9128342,-58.5842667), (-51.5386925,-58.7084045))
        # ((-39.3616333,-84.4900513), (-38.4845619,-84.4968872),
        # (-37.9843597,-84.5034332), (-37.8184128,-84.5122681))
        # ((40.2861099,82.6928101), (38.8813095,83.715477),
        # (38.0815201,84.3106308), (37.8184128,84.5122681)))
        #
        #
        #xz = 0.0799999982
        #yz = 1.22173047
        # xx = 0.706010699, yy = 0.125156388
        # 
        # fx1 = (-5.23190594,-31.4554539)
        # fx2 = (-3.4811182,-20.6209564)
        # fx3 = (-1.7379812,-10.2087593)
        # fx4 = (-1.05600691e-06,-6.18764807e-06)
        # p1 = (0.00249385834,0.218856812)
        # p2 = (-0.022952199,-1.26690102)
        # p3 = (10.4792805,63.5212288)
        # f1 = (-3.26258588,-19.2991772)
        # 
        # fx1 = (-55.8248901,-52.0042343)
        # fx2 = (-53.5441742,-52.8577766)
        # fx3 = (-52.2295036,-53.3866653)
        # fx4 = (-51.7997818,-53.5665283)
        # p1 = (0.0810966492,0.0243721008)
        # p3 = (-2.89813614,0.973960876)
        # p3 = (10.7050705,-4.17167664)
        # f2 = (-53.3284111,-52.9422455)
        # 
        # fx1 = (-39.3714485,-81.1275864)
        # fx2 = (-38.3697433,-81.3055344)
        # fx3 = (-37.7950478,-81.4247055)
        # fx4 = (-37.6067886,-81.4682007)
        # p1 = (0.0405731201,0.0168991089)
        # p2 = (-1.28102875,0.176330566)
        # p3 = (4.68861389,-0.908233643)
        # f3 = (-38.2752724,-81.3240128)
        # 
        # fx1 = (40.3760223,79.2783432)
        # fx2 = (38.7999649,80.5011444)
        # fx3 = (37.9002953,81.2262039)
        # fx4 = (37.6067886,81.4682007)
        # p1 = (-0.070224762,0.0146789551)
        # p2 = (2.02916336,-1.4932251)
        # p3 = (-7.35696411,5.8289032)
        # f4 = (38.6517792,80.6188354)
        f_fortran = np.array \
            ([ -3.26258588 -19.2991772j
             , -53.3284111 -52.9422455j
             , -38.2752724 -81.3240128j
             ,  38.6517792 +80.6188354j
            ])
        f_python = np.array \
            ([ -3.26260602  -19.2990756j
             , -53.32960901 -52.93969542j
             , -38.27673455 -81.3215046j
             ,  38.65324636 +80.61633891j
            ])
        assert f == pytest.approx (f_python,  rel = 1e-6)
        assert f == pytest.approx (f_fortran, rel = 5e-4)
    # end def test_intrp

# end class Test_Base
