#!/usr/bin/python3

import pytest
import numpy as np
from sompy import Sommerfeld

class Test_Base:

    def test_saoa_bessel (self):
        vals = \
            [ [ -3.11803722    +1.3262701j
              ,  5.93318653    -3.36045551j
              ,  0.139051959   -0.414679796j
              , -3.11248446    +1.33915186j
              ,  0.00753160566 +0.0176054034j
              ,  2.58885336    -0.97795552j
              ]
            , [ -2.64690518    +0.917380214j
              ,  5.22539663    -2.02546954j
              ,  0.294826061   -0.657950521j
              , -2.63087296    +0.960900962j
              ,  0.0013268512  +0.00372831593j
              ,  2.20666766    -0.518677175j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.zeros (s.rho.shape, dtype = complex)
        s.b = np.ones  (s.rho.shape, dtype = complex) * (53.2088928-53.2088928j)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [7] = 1
        result = []
        t = np.ones (s.rho.shape) * .25
        r = s.saoa (t, cond = cond)
        result.append (r [0])
        r = s.saoa (t * 2, cond = cond)
        result.append (r [0])
        result = np.array (result)
        assert result.shape == vals.shape
        assert result == pytest.approx (vals, rel = 1e-5)
    # end def test_saoa_bessel

    def test_saoa_hankel (self):
        vals = \
            [ [ -2.138304      -1.14035702j
              ,  0.121376038   +0.0647298098j
              , -0.153132051   +0.287140638j
              ,  2.12156224    +1.13142872j
              , -0.00265042298 -0.0014134699j
              ,  0.0364189744  +0.029970834j
              ]
            , [ -2.17637038    -1.22720146j
              ,  0.120408714   +0.0678955019j
              , -0.162322715   +0.2878699j
              ,  2.15976238    +1.2178365j
              , -0.00262929988 -0.0014825972j
              ,  0.0358796231  +0.0309694745j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.ones (s.rho.shape, dtype = complex) * 2.51327419j
        s.b = np.ones (s.rho.shape, dtype = complex) * (3.76991153 -1.2566371j)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        t = np.zeros (s.rho.shape)
        r = s.saoa (t, cond = cond)
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-5)
    # end def test_saoa_hankel

    def test_rom1_bessel (self):
        vals = \
            [ [ 0j, 0j, 0j, 0j, 0j, 0j ] # not computed for bessel
            , [ -2.31588697    +0.480371684j
              ,  4.71199608    -1.50895941j
              ,  0.324989647   -0.507604897j
              , -2.30867672    +0.528231323j
              , -0.00221469323 +0.012674178j
              ,  1.96858811    -0.311186165j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.zeros (s.rho.shape, dtype = complex)
        s.b = np.ones  (s.rho.shape, dtype = complex) * (53.2088928-53.2088928j)
        r = s.rom1 (2, s.is_bessel)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [7] = 1
        r = r [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_rom1_bessel

    def test_rom1_hankel (self):
        vals = \
            [ [ -1.44701922    +1.97692227j
              ,  0.126062781   -0.0513910204j
              ,  0.224961758   +0.193945825j
              ,  1.45205915    -1.99802136j
              , -0.00332087232 +0.00183619559j
              ,  0.044633951   -0.00629247818j
              ]
            , [ 0j, 0j, 0j, 0j, 0j, 0j ] # not computed for hankel
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        s.a = np.ones (s.rho.shape, dtype = complex) * 2.51327419j
        s.b = np.ones (s.rho.shape, dtype = complex) * (3.76991153 -1.2566371j)
        r = s.rom1 (2, s.is_hankel)
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [7] = 1
        r = r [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_rom1_hankel

    def test_gshank_bessel (self):
        seed = \
            [ [ -2.31588697    +0.480371684j
              ,  4.71199608    -1.50895941j
              ,  0.324989647   -0.507604897j
              , -2.30867672    +0.528231323j
              , -0.00221469323 +0.012674178j
              ,  1.96858811    -0.311186165j
              ]
            , [ -2.18897271    +0.478487819j
              ,  4.46816778    -1.46256638j
              ,  0.149093568   -0.235078514j
              , -2.18731856    +0.48920086j
              , -0.00232726359 +0.0125354007j
              ,  1.86808836    -0.306106269j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [ -2.80080628  -0.413829148j
              ,  5.88886356  +0.292651534j
              ,  1.12654698  -0.116916478j
              , -2.99543357  -0.385962725j
              , -0.002336937 +0.0128434291j
              ,  2.34222507  +0.4738428j
              ]
            , [ -2.87119198    -0.397920609j
              ,  5.88670492    +0.286414981j
              ,  0.559056878   -0.0576702692j
              , -2.91910267    -0.391062587j
              , -0.00244203862 +0.0127298869j
              ,  2.34124136    +0.470980108j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        b = np.zeros (s.rho.shape, dtype = complex)
        b [7] = 53.2088928 -53.2088928j
        b [8] = 50.7713356 -50.7713356j
        d = np.array ([33.4321327 +0j, 31.9005718 +0j])
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [7] = cond [8] = 1
        r = s.gshank (b, d, seed, cond) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_bessel

    def test_gshank_hankel (self):
        seed = \
            [ [  2.00776601   -8.01187611j
              , -0.272398651  +0.0381847322j
              , -0.706325531  -0.50113225j
              , -2.06688285   +8.25211906j
              ,  0.0083973892 -0.00705266185j
              , -0.0908726901 -0.0253810994j
              ]
            , [  2.19408679    -8.17548943j
              , -0.27332291    +0.0343347378j
              , -0.7048949     -0.517745733j
              , -2.25558758    +8.4144516j
              ,  0.00848118961 -0.00692269811j
              , -0.0907073617  -0.0266431328j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [  13.0748482   -10.4512615j
              , -2.36912513   +0.433109283j
              , -1.41920185   -4.10852337j
              , -11.2865829   +10.357749j
              ,  0.0147127882 -0.00860253721j
              , -0.933717251  +0.0110758897j
              ]
            , [  13.7067928   -9.71621895j
              , -2.41830635   +0.102204993j
              , -0.954755962  -4.22943687j
              , -11.8771076   +9.93634701j
              ,  0.0149100628 -0.00816507265j
              , -0.934709907  -0.12284977j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        st = np.zeros (s.rho.shape, dtype = complex)
        st [0] = 2.51327419j
        st [1] = 2.51327419j
        d = np.array ([-0.0314159133 +31.4159126j, -5.53947687 +31.4159298j])
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        r = s.gshank (st, d, seed, cond) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_hankel

    def test_gshank_hankel_recursive (self):
        seed = \
            [ [ -13.0748482   +10.4512615j
              ,  2.36912513   -0.433109283j
              ,  1.41920185   +4.10852337j
              ,  11.2865829   -10.357749j
              , -0.0147127882 +0.00860253721j
              ,  0.933717251  -0.0110758897j
              ]
            , [ -13.7067928   +9.71621895j
              ,  2.41830635   -0.102204993j
              ,  0.954755962  +4.22943687j
              ,  11.8771076   -9.93634701j
              , -0.0149100628 +0.00816507265j
              ,  0.934709907  +0.12284977j
              ]
            ]
        seed = np.array (seed)
        vals = \
            [ [ 0.103320166     -0.988833129j
              ,  5.96449757     +0.454928935j
              ,  6.3460722      -0.759163558j
              , -6.10379219     -0.0741284937j
              ,  0.000911501935 +0.0154020973j
              ,  2.37479591     +0.548333287j
              ]
            , [ -0.784671187    -0.825073123j
              ,  5.94271421     +0.419626474j
              ,  5.33457327     -0.620028794j
              , -5.16232586     -0.182956994j
              ,  0.000108209628 +0.0149045251j
              ,  2.36532521     +0.532098413j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        st = np.zeros (s.rho.shape, dtype = complex)
        st [0] = 6.40884924 -1.2566371j
        st [1] = 6.40884924 -1.2566371j
        d  = np.array ([26.8740673   +16.2709866j, 27.2886486  +16.5219936j])
        d2 = np.array ([0.0314159133 +31.4159126j,  5.53947687 +31.4159298j])
        bk = np.zeros (s.rho.shape, dtype = complex)
        bk [0] = 12.9941263 +2.73043895j
        bk [1] = 12.9941263 +2.73043895j
        cond = np.zeros (s.rho.shape, dtype = bool)
        cond [0] = cond [1] = 1
        r = s.gshank (st, d, seed, cond, bk, d2) [cond]
        assert r.shape == vals.shape
        assert r == pytest.approx (vals, rel = 1e-3)
    # end def test_gshank_hankel_recursive

    def test_evlua (self):
        vals = \
            [ [  1056.00671 -330.47583j
              ,  872.122375 -593.691833j
              ,  1150.5542  -498.038666j
              , -905.507202 +534.14978j
              ]
            , [  886.40332  -280.664612j
              ,  867.573914 -581.21875j
              ,  1112.45508 -495.226624j
              , -939.632324 +520.576355j
              ]
            , [  186.194336 -61.4843178j
              ,  858.612061 -537.646362j
              ,  1027.47156 -479.358215j
              , -1019.78796 +480.458313j
              ]
            ]
        vals = np.array (vals)
        s = Sommerfeld (4.0, .001, 10.0)
        erv, ezv, erh, eph = s.evlua ()
        result = []
        result.append ([erv [0], ezv [0], erh [0], eph [0]])
        result.append ([erv [1], ezv [1], erh [1], eph [1]])
        result.append ([erv [7], ezv [7], erh [7], eph [7]])
        result = np.array (result)
        assert result.shape == vals.shape
        assert result == pytest.approx (vals, rel = 1e-3)
    # end def test_evlua

    def test_intrp_single (self):
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        f = s.intrp (np.array ([0.0941202119, 1.24357438]))
        f_fortran = np.array \
            ([ -3.26258588 -19.2991772j
             , -53.3284111 -52.9422455j
             , -38.2752724 -81.3240128j
             ,  38.6517792 +80.6188354j
            ])
        f_python = np.array \
            ([ -3.26313939  -19.29921898j
             , -53.3261047  -52.93932859j
             , -38.27436478 -81.32161134j
             ,  38.65104022 +80.61625232j
            ])
        assert f == pytest.approx (f_python,  rel = 1e-6)
        assert f == pytest.approx (f_fortran, rel = 5e-4)
    # end def test_intrp_single

    def test_intrp (self):
        xy = np.array \
            ([ [0.100012764,        1.09986722]
             , [0.107722193,       0.974408507]
             , [0.116889544,       0.867139518]
             , [0.127199963,       0.776345909]
             , [0.138398260,       0.699692786]
             , [0.150286064,       0.634832799]
             , [0.162712350,       0.579675555]
             , [0.175562739,       0.532465994]
             , [0.188750699,       0.491772890]
             , [0.202210173,       0.456444800]
             , [0.215890393,       0.425559282]
             , [0.229751900,       0.398377240]
             , [0.243763819,       0.374303937]
             , [0.257901609,       0.352858663]
             , [0.272145629,       0.333650172]
             , [0.286480099,       0.316358089]
             , [0.300891995,       0.300718188]
             , [0.315370798,       0.286511123]
             , [0.329907656,       0.273553669]
             , [0.344495207,       0.261691689]
             , [0.359127313,       0.250794917]
             , [0.373798698,       0.240752384]
             , [0.388504952,       0.231469274]
             , [0.403242260,       0.222863987]
             , [0.418007284,       0.214866102]
             , [0.432797253,       0.207414344]
             , [0.447609603,       0.200455442]
             , [0.462442279,       0.193942636]
             , [0.477293372,       0.187834889]
             , [0.492161155,       0.182095960]
             , [0.507044196,       0.176693752]
             , [0.521941245,       0.171599776]
             , [0.536850989,       0.166788653]
             , [0.551772535,       0.162237629]
             , [0.566704929,       0.157926351]
             , [0.581647336,       0.153836519]
             , [0.596598983,       0.149951607]
             , [0.611559153,       0.146256715]
             , [0.626527309,       0.142738312]
             , [0.641502857,       0.139384165]
             , [8.91261026E-02,    1.57018709]
             , [9.04005021E-02,    1.40268528]
             , [9.41202119E-02,    1.24357438]
             ])
        f_fortran = np.array \
            ([ [ (-4.79375362 -28.2319698j), (-55.1678619 -50.1319427j)
               , (-38.9286118 -79.9155045j), (39.7559090 +78.4115906j)
               ]
             , [ (-6.25288057 -36.4585838j), (-57.5458870 -46.4586906j)
               , (-39.7510986 -78.0537033j), (41.1738052 +75.5557861j)
               ]
             , [ (-7.66597462 -43.9133873j), (-60.3304558 -42.0844879j)
               , (-40.6852646 -75.8069153j), (42.8166313 +72.1955109j)
               ]
             , [ (-9.06394768 -50.6095123j), (-63.3935928 -37.1695824j)
               , (-41.6722603 -73.2549820j), (44.6029091 +68.4626389j)
               ]
             , [ (-10.4782553 -56.5903320j), (-66.6264648 -31.8409290j)
               , (-42.6636620 -70.4638672j), (46.4610786 +64.4605713j)
               ]
             , [ (-11.9334736 -61.9041748j), (-69.9335785 -26.1964188j)
               , (-43.6178932 -67.4879608j), (48.3258438 +60.2693748j)
               ]
             , [ (-13.4467516 -66.5998535j), (-73.2309494 -20.3101215j)
               , (-44.4980011 -64.3721466j), (50.1389503 +55.9495010j)
               ]
             , [ (-15.0224247 -70.7251587j), (-76.4541855 -14.2424669j)
               , (-45.2774963 -61.1556473j), (51.8560829 +51.5491982j)
               ]
             , [ (-16.6488228 -74.3678513j), (-79.5958405 -8.08296776j)
               , (-45.9608727 -57.8930855j), (53.4881020 +47.1210022j)
               ]
             , [ (-18.3548737 -77.4917679j), (-82.5462036 -1.80267370j)
               , (-46.4880676 -54.5769768j), (54.9314613 +42.6654510j)
               ]
             , [ (-20.1201820 -80.1594009j), (-85.2599792 +4.49249840j)
               , (-46.8384094 -51.2807770j), (56.1799889 +38.2473602j)
               ]
             , [ (-21.9134598 -82.4554749j), (-87.8349075 +10.8188457j)
               , (-47.0831413 -47.9806480j), (57.2982254 +33.8532181j)
               ]
             , [ (-23.7205734 -84.4048462j), (-90.2421036 +17.1397209j)
               , (-47.2122803 -44.7046394j), (58.2703209 +29.5110626j)
               ]
             , [ (-25.5279293 -86.0294113j), (-92.4587173 +23.4246140j)
               , (-47.2184334 -41.4763908j), (59.0842972 +25.2442055j)
               ]
             , [ (-27.2951584 -87.4371643j), (-94.6093826 +29.6357555j)
               , (-47.1885300 -38.3026390j), (59.8421402 +21.0647678j)
               ]
             , [ (-29.0989609 -88.4684296j), (-96.3920822 +35.7732048j)
               , (-46.9224739 -35.2244797j), (60.3133621 +16.9923267j)
               ]
             , [ (-30.8816051 -89.2331619j), (-97.9571075 +41.8214340j)
               , (-46.5272980 -32.2332687j), (60.6152763 +13.0304747j)
               ]
             , [ (-32.6304131 -89.7558212j), (-99.3136673 +47.7650375j)
               , (-46.0130768 -29.3383923j), (60.7583122 +9.18906116j)
               ]
             , [ (-34.3320770 -90.0607376j), (-100.474709 +53.5894279j)
               , (-45.3921165 -26.5481663j), (60.7556076 +5.47733164j)
               ]
             , [ (-35.9727058 -90.1724091j), (-101.456413 +59.2804146j)
               , (-44.6787643 -23.8701820j), (60.6227646 +1.90417671j)
               ]
             , [ (-37.5565681 -90.1076660j), (-102.262642 +64.8316727j)
               , (-43.8762054 -21.3064442j), (60.3658333 -1.53073061j)
               ]
             , [ (-39.0769348 -89.8738480j), (-102.890656 +70.2428284j)
               , (-42.9856300 -18.8594112j), (59.9834023 -4.82396841j)
               ]
             , [ (-40.5229797 -89.4931030j), (-103.359749 +75.5039520j)
               , (-42.0226250 -16.5332642j), (59.4932823 -7.97004318j)
               ]
             , [ (-41.8904915 -88.9791183j), (-103.677788 +80.6095886j)
               , (-40.9940834 -14.3305826j), (58.9036446 -10.9663401j)
               ]
             , [ (-43.1762428 -88.3455124j), (-103.853996 +85.5558701j)
               , (-39.9075203 -12.2525635j), (58.2235527 -13.8116732j)
               ]
             , [ (-44.3778839 -87.6058884j), (-103.898972 +90.3404312j)
               , (-38.7711067 -10.2991438j), (57.4629211 -16.5060921j)
               ]
             , [ (-45.4938316 -86.7738647j), (-103.824455 +94.9620209j)
               , (-37.5935860 -8.46924877j), (56.6324196 -19.0506420j)
               ]
             , [ (-46.5231895 -85.8631821j), (-103.643326 +99.4204407j)
               , (-36.3842964 -6.76089382j), (55.7434845 -21.4473019j)
               ]
             , [ (-47.4656181 -84.8877335j), (-103.369537 +103.716362j)
               , (-35.1531258 -5.17130804j), (54.8083076 -23.6987896j)
               ]
             , [ (-48.3213081 -83.8615723j), (-103.017975 +107.851089j)
               , (-33.9104958 -3.69707465j), (53.8397293 -25.8084831j)
               ]
             , [ (-49.0910225 -82.7916794j), (-102.594147 +111.825912j)
               , (-32.6602974 -2.33641911j), (52.8428879 -27.7787018j)
               ]
             , [ (-49.7790489 -81.6842728j), (-102.103172 +115.645714j)
               , (-31.4055233 -1.08469677j), (51.8220863 -29.6152172j)
               ]
             , [ (-50.3878593 -80.5529861j), (-101.561241 +119.314415j)
               , (-30.1568527 +6.380748749E-02j), (50.7906647 -31.3238468j)
               ]
             , [ (-50.9194908 -79.4043808j), (-100.974953 +122.835022j)
               , (-28.9184399 +1.11239779j), (49.7541199 -32.9084625j)
               ]
             , [ (-51.3765411 -78.2447433j), (-100.351036 +126.211273j)
               , (-27.6943626 +2.06496239j), (48.7179260 -34.3735771j)
               ]
             , [ (-51.7621040 -77.0801315j), (-99.6963730 +129.447662j)
               , (-26.4886131 +2.92592406j), (47.6874924 -35.7243042j)
               ]
             , [ (-52.0797920 -75.9164047j), (-99.0179901 +132.549316j)
               , (-25.3051414 +3.70021248j), (46.6682320 -36.9663315j)
               ]
             , [ (-52.3336487 -74.7592697j), (-98.3230286 +135.521973j)
               , (-24.1478653 +4.39321804j), (45.6655540 -38.1058502j)
               ]
             , [ (-52.5281525 -73.6143188j), (-97.6188049 +138.371948j)
               , (-23.0206680 +5.01076889j), (44.6848869 -39.1495628j)
               ]
             , [ (-52.6681709 -72.4870148j), (-96.9127579 +141.106049j)
               , (-21.9274387 +5.55908728j), (43.7316780 -40.1046028j)
               ]
             , [ (-5.975404754E-03 -3.542200476E-02j), (-51.7634392 -55.3201294j)
               , (-37.7107506 -82.5004425j), (37.7107735 +82.5004272j)
               ]
             , [ (-1.65600264 -9.80712223j), (-52.1639366 -54.7130966j)
               , (-37.8567390 -82.2005997j), (37.9525261 +82.0178452j)
               ]
             , [ (-3.26258588 -19.2991772j), (-53.3284111 -52.9422455j)
               , (-38.2752724 -81.3240128j), (38.6517792 +80.6188354j)
               ]
            ])
        s = Sommerfeld (4.0, .001, 10.0)
        s.compute ()
        f = s.intrp (xy)
        assert f == pytest.approx (f_fortran, rel = 5e-4)
    # end def test_intrp

# end class Test_Base
